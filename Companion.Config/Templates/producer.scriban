using RabbitMQ.Client;
using System.Text;
using System.Text.Json;

namespace {{ options.namespace }};

/// <summary>
/// Generated RabbitMQ message producer
/// </summary>
public class RabbitMqProducer : IDisposable
{
    private readonly IConnection _connection;
    private readonly IModel _channel;

    public RabbitMqProducer()
    {
        var factory = new ConnectionFactory
        {
            HostName = "localhost", // Configure as needed
            UserName = "{{ options.username }}",
            Password = "{{ options.password }}",
            VirtualHost = "{{ options.virtualhost }}"
        };

        _connection = factory.CreateConnection();
        _channel = _connection.CreateModel();

        // Declare exchanges
        {{~ for exchange in topology.exchanges ~}}
        _channel.ExchangeDeclare(
            exchange: "{{ exchange.name }}",
            type: "{{ exchange.type | string.downcase }}",
            durable: {{ exchange.durable | string.downcase }},
            autoDelete: {{ exchange.autodelete | string.downcase }},
            arguments: {{ exchange.arguments | object.to_json }});

        {{~ end ~}}

        // Declare queues
        {{~ for queue in topology.queues ~}}
        _channel.QueueDeclare(
            queue: "{{ queue.name }}",
            durable: {{ queue.durable | string.downcase }},
            exclusive: {{ queue.exclusive | string.downcase }},
            autoDelete: {{ queue.autodelete | string.downcase }},
            arguments: {{ queue.arguments | object.to_json }});

        {{~ end ~}}

        // Create bindings
        {{~ for binding in topology.bindings ~}}
        _channel.QueueBind(
            queue: "{{ binding.destinationqueue }}",
            exchange: "{{ binding.sourceexchange }}",
            routingKey: "{{ binding.routingkey }}",
            arguments: {{ binding.arguments | object.to_json }});

        {{~ end ~}}
    }

    {{~ for exchange in topology.exchanges ~}}
    /// <summary>
    /// Publishes a message to the {{ exchange.name }} exchange
    /// </summary>
    public void PublishTo{{ exchange.name | string.pascalcase }}(object message, string routingKey = "")
    {
        var json = JsonSerializer.Serialize(message);
        var body = Encoding.UTF8.GetBytes(json);

        _channel.BasicPublish(
            exchange: "{{ exchange.name }}",
            routingKey: routingKey,
            basicProperties: null,
            body: body);
    }

    {{~ end ~}}

    public void Dispose()
    {
        _channel?.Dispose();
        _connection?.Dispose();
    }
} 