// <auto-generated />
using System;
using System.Collections.Generic;
using Companion.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Companion.Infrastructure.Migrations
{
    [DbContext(typeof(CompanionDbContext))]
    [Migration("20250326100527_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("und-x-icu")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Companion.Core.Models.Binding", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Dictionary<string, object>>("Arguments")
                        .HasColumnType("jsonb")
                        .HasColumnName("arguments");

                    b.Property<string>("DestinationQueue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("destination_queue");

                    b.Property<string>("RoutingKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("routing_key");

                    b.Property<string>("SourceExchange")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source_exchange");

                    b.Property<string>("TopologyId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TopologyId");

                    b.ToTable("bindings", (string)null);
                });

            modelBuilder.Entity("Companion.Core.Models.Exchange", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Dictionary<string, object>>("Arguments")
                        .HasColumnType("jsonb")
                        .HasColumnName("arguments");

                    b.Property<bool>("AutoDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_delete");

                    b.Property<bool>("Durable")
                        .HasColumnType("boolean")
                        .HasColumnName("durable");

                    b.Property<bool>("Internal")
                        .HasColumnType("boolean")
                        .HasColumnName("internal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("TopologyId")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("TopologyId");

                    b.ToTable("exchanges", (string)null);
                });

            modelBuilder.Entity("Companion.Core.Models.Queue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Dictionary<string, object>>("Arguments")
                        .HasColumnType("jsonb")
                        .HasColumnName("arguments");

                    b.Property<bool>("AutoDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_delete");

                    b.Property<string>("DeadLetterExchange")
                        .HasColumnType("text")
                        .HasColumnName("dead_letter_exchange");

                    b.Property<string>("DeadLetterRoutingKey")
                        .HasColumnType("text")
                        .HasColumnName("dead_letter_routing_key");

                    b.Property<bool>("Durable")
                        .HasColumnType("boolean")
                        .HasColumnName("durable");

                    b.Property<bool>("Exclusive")
                        .HasColumnType("boolean")
                        .HasColumnName("exclusive");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("integer")
                        .HasColumnName("max_length");

                    b.Property<int?>("MessageTtl")
                        .HasColumnType("integer")
                        .HasColumnName("message_ttl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("TopologyId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TopologyId");

                    b.ToTable("queues", (string)null);
                });

            modelBuilder.Entity("Companion.Core.Models.Topology", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("topologies", (string)null);
                });

            modelBuilder.Entity("Companion.Core.Models.Binding", b =>
                {
                    b.HasOne("Companion.Core.Models.Topology", null)
                        .WithMany("Bindings")
                        .HasForeignKey("TopologyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Companion.Core.Models.Exchange", b =>
                {
                    b.HasOne("Companion.Core.Models.Topology", null)
                        .WithMany("Exchanges")
                        .HasForeignKey("TopologyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Companion.Core.Models.Queue", b =>
                {
                    b.HasOne("Companion.Core.Models.Topology", null)
                        .WithMany("Queues")
                        .HasForeignKey("TopologyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Companion.Core.Models.Topology", b =>
                {
                    b.Navigation("Bindings");

                    b.Navigation("Exchanges");

                    b.Navigation("Queues");
                });
#pragma warning restore 612, 618
        }
    }
}
